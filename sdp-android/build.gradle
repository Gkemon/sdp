apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.0'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33
    }
}

class SDPFactory extends DefaultTask {

    @Input
    String unit = "dp"
    @Input
    double positiveMax = 600
    @Input
    double negativeMax = 60

    @TaskAction
    def create() {
        String resFolder =  project.getProjectDir().getPath() + "/src/main/res/"
        for(double dimen = 300; dimen <= 1080 ; dimen = dimen + 30){
            String folder = resFolder + "values-sw" + (int)dimen + "dp"
            String fileName = folder + "/positive_sdps.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            PrintWriter printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for(int i=1; i<=positiveMax; i++){
                double ratio = i/300d
                double sdp = ratio*dimen
                printWriter.printf("\t<dimen name=\"_%dsdp\">%.2f" + unit + "</dimen>\r\n",i,sdp)
            }
            printWriter.println("</resources>")
            printWriter.close()
        }
        for(double dimen = 300; dimen <= 1080; dimen = dimen + 30){
            String folder = resFolder + "values-sw" + (int)dimen + "dp"
            String fileName = folder + "/negative_sdps.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            PrintWriter printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for(int i=1;i<=negativeMax;i++){
                double ratio = i/300d
                double sdp = ratio*dimen
                printWriter.printf("\t<dimen name=\"_minus%dsdp\">%.2f" + unit + "</dimen>\r\n",i,-sdp)
            }
            printWriter.println("</resources>")
            printWriter.close()
        }
    }

    @Override
    void setActions(List<Action<? super Task>> actions) {

    }

    @Override
    void onlyIf(Spec<? super Task> onlyIfSpec) {

    }

    @Override
    void setOnlyIf(Spec<? super Task> onlyIfSpec) {

    }

    @Override
    Task doFirst(Action<? super Task> action) {
        return null
    }

    @Override
    Task doFirst(String actionName, Action<? super Task> action) {
        return null
    }

    @Override
    Task doLast(Action<? super Task> action) {
        return null
    }

    @Override
    Task doLast(String actionName, Action<? super Task> action) {
        return null
    }

    @Override
    int compareTo(Task task) {
        return 0
    }
}

task createSDP(type: SDPFactory) {
}

//uncomment next line to edit values
//preBuild.dependsOn createSDP

createSDP{
    unit = "dp"//change to "sp" if needed
    positiveMax = 600//change to 600 or any other value if needed
    negativeMax = 60//change to 600 or any other value if needed
}

publishing {
    publications {
        release(MavenPublication) {

            artifactId = 'sdp-android'
            groupId = 'com.intuit.sdp'
            version = '1.1.0'
            artifact("$buildDir/outputs/aar/sdp-android-release.aar")

            pom {
                name = 'sdp'
                description = 'A scalable size unit for Andorid'
                url = 'https://github.com/intuit/sdp'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/intuit/sdp/blob/master/LICENSE'
                    }
                }
            }
        }
    }
    repositories {
        maven {

        }
    }
}

